# Case-study #1
# Developers: Lagoda K., Zheravina A., Pinoeva K., Mozhaitseva M.
#

import turtle
turtle.speed(15)

def hypotenuse_triangle(x,y,z,length,color_line,color_filling):
    """
    Function, drawing an isosceles rectangular triangle using the length of the hypotenuse.
    :param x: acute angle of a triangle coordinate x
(after moving along the hypotenuse, the turtle turns left)
    :param y: acute angle of a triangle coordinate y
(after moving along the hypotenuse, the turtle turns left)
    :param z: the angle of the turtle's direction relative to the fact that east=0
    :param length: length of the triangle hypotenuse
    :param color_line: color of triangle outline
    :param color_filling: inner color of triangle
    :return: None
    """
    turtle.up()
    turtle.goto(x,y)
    turtle.seth(z)
    turtle.down()
    turtle.color(color_line,color_filling)
    turtle.begin_fill()
    turtle.forward(length)
    turtle.left(135)
    turtle.forward((length**2/2)**0.5)
    turtle.left(90)
    turtle.forward((length**2/2)**0.5)
    turtle.end_fill()


def leg_triangle(x, y,z, length, color_line, color_filling):
    """
    Function, drawing an isosceles rectangular triangle using the length of the leg.
    :param x: acute angle of a triangle coordinate x
(after moving along the hypotenuse, the turtle turns left)
    :param y: acute angle of a triangle coordinate y
(after moving along the hypotenuse, the turtle turns left)
    :param z: the angle of the turtle's direction relative to the fact that east=0
    :param length: length of the triangle leg
    :param color_line: color of triangle outline
    :param color_filling: inner color of triangle
    :return: None
    """
    turtle.up()
    turtle.goto(x, y)
    turtle.seth(z)
    turtle.color(color_line, color_filling)
    turtle.begin_fill()
    turtle.forward(2**0.5*length)
    turtle.left(135)
    turtle.forward(length)
    turtle.left(90)
    turtle.forward(length)
    turtle.end_fill()


def square(x,y,z,length,color_line,color_filling):
    """
    Function, drawing a square.
    :param x: lower left angle of a square coordinate x
    :param y: lower left angle of a square coordinate y
    :param z: the angle of the square's direction relative to the fact that east=0
    :param length: length of the square
    :param color_line: color of square outline
    :param color_filling: inner color of square
    :return: None
    """
    turtle.up()
    turtle.goto(x,y)
    turtle.seth(z)
    turtle.color(color_line,color_filling)
    turtle.begin_fill()
    turtle.forward(length)
    turtle.left(90)
    turtle.forward(length)
    turtle.left(90)
    turtle.forward(length)
    turtle.left(90)
    turtle.forward(length)
    turtle.end_fill()


def base_parallelogram(x, y,z, length, color_line, color_filling):
    """
    Function, drawing parallelogram using the length of the base.
    :param x: lower left acute angle of parallelogram coordinate x
    :param y: lower left acute angle of parallelogram coordinate y
    :param z: the angle of the parallelogram's direction relative to the fact that east=0
    :param length: length of the base of a parallelogram
    :param color_line: color of a parallelogram outline
    :param color_filling: inner color of a parallelogram
    :return: None
    """
    turtle.up()
    turtle.goto(x, y)
    turtle.seth(z)
    turtle.color(color_line, color_filling)
    turtle.begin_fill()
    turtle.forward(length)
    turtle.left(45)
    turtle.forward(length/2*2**0.5)
    turtle.left(135)
    turtle.forward(length)
    turtle.left(45)
    turtle.forward(length/2*2**0.5)
    turtle.end_fill()


def side_parallelogram(x, y, z, length, color_line, color_filling):
    """
    Function, drawing parallelogram using the length of the side.
    :param x: lower left acute angle of parallelogram coordinate x
    :param y: lower left acute angle of parallelogram coordinate y
    :param z: the angle of the parallelogram's direction relative to the fact that east=0
    :param length: length of the side of a parallelogram
    :param color_line: color of a parallelogram outline
    :param color_filling: inner color of a parallelogram
    :return: None
    """
    turtle.up()
    turtle.goto(x, y)
    turtle.seth(z)
    turtle.color(color_line, color_filling)
    turtle.begin_fill()
    turtle.forward(length/ 2 * 2 ** 0.5)
    turtle.left(45)
    turtle.forward(length)
    turtle.left(135)
    turtle.forward(length/ 2 * 2 ** 0.5)
    turtle.left(45)
    turtle.forward(length)
    turtle.end_fill()


def main_square():
    """
    Function, drawing square in the middle made of figures.
    :return: None
    """
    hypotenuse_triangle(-100,100,270,200,"white","purple")
    hypotenuse_triangle(100, 100, 180,200, "white","green")
    hypotenuse_triangle(100, 0, 90,100, "white","orange")
    leg_triangle(100, 0, 225, 100, "white", "blue")
    square(100, 0,135,5000**0.5, "white", "yellow")
    hypotenuse_triangle(-50, (-50), 0, 100, "white", "red")
    base_parallelogram(-100,(-100),0,100, "white", "pink")


def turtle_paint(k,l):
    """
    Function, drawing a turtle.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    hypotenuse_triangle(0+k, 40+l, 270, 80, "white", "brown")
    hypotenuse_triangle(0+k, -40 + l, 90, 80, "white", "black")
    square(40+k, 0 + l, 315, 800**0.5, "white", "green")
    leg_triangle(20+k, 20+l, 45, 20, "white", "blue")
    leg_triangle(40+k, (-40+l), 135, 20, "white", "pink")
    base_parallelogram(-20+k, 20+l, 135, 30, "white", "yellow")
    base_parallelogram(-60+k, -40 + l, 0, 30, "white", "purple")


def whale(k,l):
    """
    Function, drawing a whale.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    leg_triangle(-60+k, 30+l, 315, 60, "white", "violet")
    leg_triangle(60+k, -30 + l, 135, 60, "white", "blue")
    base_parallelogram(0+k, -30 + l, 135, 2*450**0.5, "white", "yellow")
    hypotenuse_triangle(60+k, 10 + l, 180, 40, "white", "orange")
    square(80+k, -10 + l, 135, 800 ** 0.5, "white", "green")
    hypotenuse_triangle(80+k, -10 + l, 90, 40, "white", "pink")
    hypotenuse_triangle(100+k, 50 + l, 180, 40, "white", "purple")


def lion(k, l):
    """
    Function, drawing a lion.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    square(30 + k, 30 + l, 45, 25, "white", "red")
    hypotenuse_triangle(3 + k, 35 + l, 45, 60, "white", "green")
    hypotenuse_triangle(3 + k, 70 + l, 225, 50, "white", "blue")
    hypotenuse_triangle(-20 + k, 35 + l, -45, 35, "white", "pink")
    hypotenuse_triangle(-70 + k, -2 + l, 45, 75, "white", "purple")
    hypotenuse_triangle(-70 + k, -2 + l, 0, 35, "white", "pink")
    base_parallelogram(-102 + k, 82 + l, -60, 30, "white", "yellow")


def crab(k,l):
    """
    Function, drawing a crab.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    square(k, 30+l, 0, 20, "white", "fuchsia")
    hypotenuse_triangle(20+k,10+l,135,50,"white","lawngreen")
    hypotenuse_triangle(k,30+l,-45,50,"white","purple")
    hypotenuse_triangle(-15+k,30+l,90,25,"white","salmon")
    hypotenuse_triangle(-15+k,-6+l,45,22,"white","orange")
    side_parallelogram(25+k,30+l,0,15, "white", "pink")
    hypotenuse_triangle(45+k,40+l,135,15,"white","blue")


def bear(k,l):
    """
    Function, drawing a bear.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    hypotenuse_triangle(-40 + k, 20 + l, 135, 40, "white", "yellow")
    hypotenuse_triangle(-50 + k, 30 + l, 90, 80, "white", "pink")
    leg_triangle(-50 + k, 40 + l, 45, 70, "white", "orange")
    leg_triangle(20 + k, 110 + l, 225, 50, "white", "blue")
    base_parallelogram(-5 + k, 62 + l, -50, 30, "white", "green")
    square(20 + k, 80 + l, 0, 30, "white", "purple")
    hypotenuse_triangle(78 + k, 80 + l, 135, 40, "white", "magenta")


def horse(k,l):
    """
    Function, drawing a horse.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    hypotenuse_triangle(-30 +k, 100 + l, 0, 50, "white", "blue")
    square(-10 + k, 70 + l, 0, 30, "white", "purple")
    leg_triangle(-50 + k, 70 + l, 315, 70, "white", "pink")
    hypotenuse_triangle(-70 + k, 50 + l, 0, 40, "white", "magenta")
    hypotenuse_triangle(20 + k, 70 + l, 270, 90, "white", "orange")
    leg_triangle(20 + k, 0 + l, 225, 30, "white", "yellow")
    base_parallelogram(65 + k, 25 + l, 270, 30, "white", "green")


def hare(k, l):
    """
    Function, drawing a hare.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    leg_triangle(k, l, 90, 40, "white", "salmon")
    side_parallelogram(k + 1, l, 10, 40, "white", "darkred")
    square(k + 1, l - 0.5, -90, 40 / 1.5, "white", "sienna")
    hypotenuse_triangle(k, l - 26, -90, 40, "white", "orange")
    hypotenuse_triangle(k + 20, l - 75, 90, 40 / 2 ** 0.5, "white", "goldenrod")
    leg_triangle(k, l - 86, 90, 80 / 1.5, "white", "tomato")
    hypotenuse_triangle(k + 22, l - 108.5, 135, 130 / 1.5, "white", "sandybrown")


def seal(k,l):
    """
    Function, drawing a seal.
    :param k: how much higher or lower is the x coordinate
relative to the initial one
    :param l: how much higher or lower is the y coordinate
relative to the initial one
    :return: None
    """
    leg_triangle(k, l, (-30), 40, "white", "aquamarine")
    square(k+9, l-39, (-30), 40/(2**0.5), "white", "aqua")
    leg_triangle(k+8, l-40, -75, 40/2**0.5, "white", "mediumslateblue")
    side_parallelogram(k+7, l-43, -120, 57/1.5, "white", "lightskyblue")
    leg_triangle(k + 69, l-107, 105, 40 * 2 ** 0.5, "white", "springgreen")
    leg_triangle(k + 124.5, l-92, 150, 40 * 2 ** 0.5, "white", "deepskyblue")
    leg_triangle(k+140, l-67, 194, 40/2**0.5, "white", "mediumslateblue")

def main():
    """
    Main function.
    :return: None
    """
    main_square()
    whale(-200, 180)
    crab(0, 160)
    turtle_paint(190, 180)
    hare(-200,40)
    horse(200, -40)
    lion(-160, -235)
    seal(-45, -140)
    bear(225,(-260))
    turtle.done()

if __name__ == '__main__':
    main()
